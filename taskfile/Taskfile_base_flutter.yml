version: "3"

#
# global vars: https://taskfile.dev/#/usage?id=variables
#
vars:
  VAR1: "some-var"

# global env:
env:
  ENV1: testing

################################################################################################

# task groups:
tasks:
  default:
    cmds:
      - task: init
      - task: run

  install:
    cmds:
      - brew install --cask ngrok
      - brew install fvm
      - fvm install 2.5.1
      - fvm list

  init:
    cmds:
      - fvm use 2.5.1 --force
      - task: deactivate
      - task: activate

  activate: # activate tools
    cmds:
      - pub global activate get_cli
      - pub global activate dhttpd
    ignore_error: true

  deactivate:
    cmds:
      - pub global deactivate get_cli
      - pub global deactivate dhttpd
    ignore_error: true

  #########################################################################

  new:
    desc: "create flutter app"
    cmds:
      - echo "$(pwd) > ${FLUTTER_APP_ROOT} > ${FLUTTER_APP_NAME}"
      - cd ${FLUTTER_APP_ROOT}; fvm flutter create ${FLUTTER_APP_NAME}

  new:mono:
    cmds:
      - cookiecutter https://github.com/better-dart/flutter-template.git --directory="mono-repo"

  get:
    cmds:
      - task: do
        vars: { CMD: "pub get" }

  run:
    cmds:
      - task: do
        vars: { CMD: "run --debug" }

  run:ios:
    cmds:
      - task: do
        vars: { CMD: "run --debug -d ${FLUTTER_DEVICE_ID_IOS}" }

  run:android:
    cmds:
      - task: do
        vars: { CMD: "run --debug -d ${FLUTTER_DEVICE_ID_ANDROID}" }

  run:web:
    cmds:
      - task: do
        vars: { CMD: "run --debug -d chrome --web-renderer html" } # load speed

  deploy:
    cmds:
      - task: clean
      - task: release:web
      - open http://localhost:8080
      - cd ${FLUTTER_APP_ROOT}/${FLUTTER_APP_NAME}; open build/web/
      - echo "$(pwd)"
      #      - cd ${FLUTTER_APP_ROOT}/${FLUTTER_APP_NAME}; ngrok http file:///$(pwd)/build/web
      - cd ${FLUTTER_APP_ROOT}/${FLUTTER_APP_NAME}; dhttpd --port 8080 --path build/web/

  clean:
    cmds:
      - task: do
        vars: { CMD: "clean" }

  #
  # 每次升级 flutter 版本, 要执行 clean + run, 否则报奇怪错误.
  #
  clean:run:
    cmds:
      - task: clean
      - task: run

  release:
    cmds:
      - task: release:ios
      - task: release:android
      - task: release:web

  release:web:
    cmds:
      - task: do
        vars: { CMD: "build web --release --web-renderer html" } # 不使用 canvaskit.wasm, 优化加载速度

  release:ios:
    cmds:
      - task: do
        vars: { CMD: "build ios" }
      - open build/ios/iphoneos
      - task: open:xcode

  release:android:
    cmds:
      - task: do
        vars: { CMD: "build apk" }
      - echo 'check build/app/outputs/flutter-apk/ folder'
      - cp build/app/outputs/flutter-apk/app-release.apk build/app/outputs/flutter-apk/wallet-v`date +%Y-%m-%d`-release.apk
      - open build/app/outputs/flutter-apk/
  #      - fvm flutter build apk --target-platform android-arm,android-arm64,android-x64 --split-per-abi  # 分 ARM 架构打包, 包更小

  do:
    cmds:
      - echo "$(pwd)/${FLUTTER_APP_ROOT}/${FLUTTER_APP_NAME}"
      - cd ${FLUTTER_APP_ROOT}/${FLUTTER_APP_NAME}; fvm flutter {{.CMD}} # DO CMD

  open:xcode:
    cmds:
      - open ios/Runner.xcworkspace # not Runner.xcodeproj
      - open https://appstoreconnect.apple.com/apps/1542311370/testflight/ios
      - open https://testflight.apple.com/join/Vain6SGh

  #########################################################################

  # cli:
  get:init:
    cmds:
      - get init
